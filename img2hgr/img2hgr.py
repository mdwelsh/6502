#!/usr/bin/env python

import argparse
import math
import sys

from PIL import Image


BYTES_PER_COL = 8


def a2convert(r: int, g: int, b: int) -> int:
    if r == 0 and g == 0 and b == 0:
        return 0
    else:
        return 1


def process_image(infile, outfile, name, width, height, outbin):
    img = Image.open(infile)
    img = img.convert("RGB")
    img = img.resize((width, height), resample=Image.NEAREST)
    pixels = list(img.getdata())

    curpixel = 0
    shift = 7

    if outbin:
        mode = "wb+"
    else:
        mode = "w+"

    with open(outfile, mode) as outf:
        if not outbin:
            outf.write(
                f"; Generated by img2hgr.py --name {name} --width {width} "
                f"--height {height} {infile} {outfile}\n"
            )
        col = 0
        if not outbin:
            outf.write(f"{name}:\n")
        for pixel in pixels:
            r, g, b = pixel
            if r >= 128 or g >= 128 or b >= 128:
                curpixel = curpixel | (1 << shift - 1)

            shift = shift - 1
            if shift == 0:
                # Finished with output byte
                if outbin:
                    outf.write(bytes([curpixel & 0xFF]))
                else:
                    if col == 0:
                        outf.write("  .byte ")
                    outf.write(f"${curpixel:02x}")
                    col += 1
                    if col < BYTES_PER_COL:
                        outf.write(",")
                    else:
                        outf.write("\n")
                        col = 0
                shift = 7
                curpixel = 0

        if not outbin:
            outf.write("\n")
    if outbin:
        print(f"Saved binary to {outfile}")
    else:
        print(f"Saved assembly to {outfile}")


def main():
    parser = argparse.ArgumentParser()
    parser.add_argument("--name", type=str, required=True)
    parser.add_argument("--width", type=int, default=280)
    parser.add_argument("--height", type=int, default=192)
    parser.add_argument("--bin", type=bool, default=True)
    parser.add_argument("infile")
    parser.add_argument("outfile")
    args = parser.parse_args()

    process_image(
        args.infile,
        args.outfile,
        args.name,
        args.width,
        args.height,
        args.bin,
    )


if __name__ == "__main__":
    main()
